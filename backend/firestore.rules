rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // HELPERS
    function isSignedIn() {
      return request.auth != null;
    }

    function isOwner() {
      return isSignedIn() && (
        (resource != null && resource.data.createdBy == request.auth.uid) ||
        (request.resource != null && request.resource.data.createdBy == request.auth.uid)
      );
    }

    function isCollaborator() {
      return isSignedIn() &&
        ((resource != null && resource.data.collaborators != null && request.auth.uid in resource.data.collaborators) ||
        (request.resource != null && request.resource.data.collaborators != null && request.auth.uid in request.resource.data.collaborators));
    }

    // MODULES
    match /modules/{moduleId} {
      allow read: if (resource.data.isPublic != null && resource.data.isPublic == true) || isOwner() || isCollaborator();
      allow create: if isSignedIn() && validateModule() && request.resource.data.createdBy == request.auth.uid;
      allow update, delete: if isOwner() || isCollaborator();

      function validateModule() {
        return request.resource.data.keys().hasAll(['title', 'description', 'createdBy', 'isPublic', 'tags', 'createdAt', 'updatedAt', 'stepCount'])
        && request.resource.data.title is string
        && request.resource.data.description is string
        && request.resource.data.isPublic is bool
        && request.resource.data.tags is list
        && request.resource.data.stepCount is int;
      }

      // STEPS
      match /steps/{stepId} {
        allow read: if parent().data.isPublic == true || isOwner() || isCollaborator();
        allow create, update, delete: if (isOwner() || isCollaborator()) && validateStep();

        function validateStep() {
          return request.resource.data.keys().hasAll(['title', 'type', 'order', 'createdBy', 'createdAt', 'updatedAt'])
          && request.resource.data.title is string
          && request.resource.data.type in ['video', 'quiz', 'flashcards']
          && request.resource.data.order is int
          && request.resource.data.createdBy is string
          && hasOnlyOnePayloadType()
          && hasMatchingPayloadType()
          && validatePayload();
        }

        function hasOnlyOnePayloadType() {
          let payloadKeys = ['video', 'quiz', 'flashcards'];
          let present = payloadKeys.filter(k => k in request.resource.data);
          return present.size() == 1;
        }

        function hasMatchingPayloadType() {
          let t = request.resource.data.type;
          return (t == 'video' && 'video' in request.resource.data) || (t == 'quiz' && 'quiz' in request.resource.data) || (t == 'flashcards' && 'flashcards' in request.resource.data);
        }

        function validatePayload() {
          let t = request.resource.data.type;

          return (t == 'video' && validateVideoPayload()) || (t == 'quiz' && validateQuizPayload()) || (t == 'flashcards' && validateFlashcardsPayload());
        }

        function validateVideoPayload() {
          let v = request.resource.data.video;
          return v.youtubeUrl is string
            && (!('thumbnailUrl' in v) || v.thumbnailUrl is string)
            && (!('durationSec' in v) || v.durationSec is int);
        }

        function validateQuizPayload() {
          let q = request.resource.data.quiz;
          return q.shuffle is bool
            && q.questions is list
            && q.questions.size() > 0
            && q.questions[0].prompt is string
            && q.questions[0].choices is list
            && q.questions[0].correctIndex is int
            && (!('explanation' in q.questions[0]) || q.questions[0].explanation is string)
            && q.passingScore is int
            && q.passingScore >= 0
            && q.passingScore <= 100;
        }

        function validateFlashcardsPayload() {
          let f = request.resource.data.flashcards;
          return (!('title' in f) || f.title is string)
            && f.cards is list
            && f.cards.size() > 0
            && f.cards[0].front is string
            && f.cards[0].back is string
            && (!('studyMode' in f) || f.studyMode in ['spaced', 'random']);
        }
      }
    }

    // USERS
    match /users/{userId} {
      allow read: if isSignedIn();
      allow create: if isSignedIn() && request.auth.uid == userId;
      allow update, delete: if request.auth.uid == userId;

      match /progress/{moduleId} {
        allow read, write: if isSignedIn() && request.auth.uid == userId && validateProgress();

        function validateProgress() {
          return request.resource.data.keys().hasAll(['completedStepIds', 'lastViewedAt', 'quizScores', 'startedAt', 'completedAt'])
          && request.resource.data.completedStepIds is list
          && request.resource.data.quizScores is map
          && request.resource.data.lastViewedAt is timestamp
          && request.resource.data.startedAt is timestamp;
        }
      }
    }
  }
}