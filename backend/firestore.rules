rules_version = '2';

service cloud.firestore {

  // HELPERS
  function isSignedIn() {
    return request.auth != null;
  }

  function isOwner() {
    return isSignedIn() && (
      (resource != null && resource.data.createdBy == request.auth.uid) ||
      (request.resource != null && request.resource.data.createdBy == request.auth.uid)
    );
  }

  function isCollaborator() {
    return isSignedIn() &&
      ((resource != null && resource.data.collaborators != null && request.auth.uid in resource.data.collaborators) ||
      (request.resource != null && request.resource.data.collaborators != null && request.auth.uid in request.resource.data.collaborators));
  }

  function validateModule() {
    return request.resource.data.keys().hasAll(['title', 'description', 'createdBy', 'isPublic', 'tags', 'createdAt', 'updatedAt', 'stepCount'])
    && request.resource.data.title is string
    && request.resource.data.description is string
    && request.resource.data.isPublic is bool
    && request.resource.data.tags is list
    && request.resource.data.stepCount is int
    && (!('collaborators' in request.resource.data) || request.resource.data.collaborators is list)
    && (!('publishedVersion' in request.resource.data) || request.resource.data.publishedVersion is int)
    && (!('thumbnailUrl' in request.resource.data) || request.resource.data.thumbnailUrl is string);
  }

  function validateProgress() {
    return request.resource.data.keys().hasAll(['completedStepIds', 'lastViewedAt', 'quizScores', 'startedAt', 'completedAt'])
    && request.resource.data.completedStepIds is list
    && request.resource.data.quizScores is map
    && request.resource.data.lastViewedAt is timestamp
    && request.resource.data.startedAt is timestamp
    && (request.resource.data.completedAt == null || request.resource.data.completedAt is timestamp);
  }

  function validateStep() {
    return request.resource.data.keys().hasAll(['title', 'type', 'order', 'createdBy', 'createdAt', 'updatedAt'])
    && request.resource.data.title is string
    && request.resource.data.type in ['video', 'quiz', 'flashcards', 'freeResponse']
    && request.resource.data.order is int
    && request.resource.data.createdBy is string
    && hasMatchingPayloadType()
    && validatePayload();
  }

  function hasMatchingPayloadType() {
    let t = request.resource.data.type;
    return (t == 'video' && 'video' in request.resource.data) || (t == 'quiz' && 'quiz' in request.resource.data) || (t == 'flashcards' && 'flashcards' in request.resource.data) || (t == 'freeResponse' && 'freeResponse' in request.resource.data);
  }

  function validatePayload() {
    let t = request.resource.data.type;
    return (t == 'video' && validateVideoPayload()) || (t == 'quiz' && validateQuizPayload()) || (t == 'flashcards' && validateFlashcardsPayload()) || (t == 'freeResponse' && validateFreeResponsePayload());
  }

  function validateVideoPayload() {
    let v = request.resource.data.video;
    return v.youtubeUrl is string
      && (!('thumbnailUrl' in v) || v.thumbnailUrl is string)
      && (!('durationSec' in v) || v.durationSec is int);
  }

  function validateQuizPayload() {
    let q = request.resource.data.quiz;
    return q.shuffle is bool
      && q.questions is list
      && q.questions.size() > 0
      && q.questions[0].prompt is string
      && q.questions[0].choices is list
      && q.questions[0].correctIndex is int
      && (!('explanation' in q.questions[0]) || q.questions[0].explanation is string)
      && q.passingScore is int
      && q.passingScore >= 0
      && q.passingScore <= 100;
  }

  function validateFlashcardsPayload() {
    let f = request.resource.data.flashcards;
    return (!('title' in f) || f.title is string)
      && f.cards is list
      && f.cards.size() > 0
      && f.cards[0].front is string
      && f.cards[0].back is string
      && (!('studyMode' in f) || f.studyMode in ['spaced', 'random']);
  }

  function validateFreeResponsePayload() {
    let f = request.resource.data.freeResponse;
    return f.prompt is string
      && (!('sampleAnswer' in f) || f.sampleAnswer is string)
      && (!('maxLength' in f) || (f.maxLength is int && f.maxLength > 0 && f.maxLength <= 10000));
  }

  function validateStepUpdate() {
    let allowedFields = [
      'title',
      'type',
      'order',
      'updatedAt',
      'video',
      'quiz',
      'flashcards',
      'freeResponse'
    ];
    return request.resource.data.keys().hasOnly(allowedFields)
      && request.resource.data.diff(resource.data).affectedKeys().size() > 0
      && (
        !('title' in request.resource.data) || request.resource.data.title is string
      )
      && (
        !('order' in request.resource.data) || request.resource.data.order is int
      )
      && (
        !('updatedAt' in request.resource.data) || request.resource.data.updatedAt is timestamp
      )
      && (
        !('type' in request.resource.data) || request.resource.data.type in ['video', 'quiz', 'flashcards', 'freeResponse']
      )
      && (
        resource.data.createdBy == request.resource.data.createdBy
      )
      && (
        resource.data.createdAt == request.resource.data.createdAt
      );
  }

  function validateModuleUpdate() {
    let allowedFields = [
      'title',
      'description',
      'isPublic',
      'tags',
      'updatedAt',
      'stepCount',
      'publishedVersion',
      'thumbnailUrl',
      'collaborators'
    ];
    return request.resource.data.keys().hasOnly(allowedFields)
      && request.resource.data.diff(resource.data).affectedKeys().size() > 0
      && (
        !('title' in request.resource.data) || request.resource.data.title is string
      )
      && (
        !('description' in request.resource.data) || request.resource.data.description is string
      )
      && (
        !('isPublic' in request.resource.data) || request.resource.data.isPublic is bool
      )
      && (
        !('tags' in request.resource.data) || request.resource.data.tags is list
      )
      && (
        !('stepCount' in request.resource.data) || request.resource.data.stepCount is int
      )
      && (
        !('publishedVersion' in request.resource.data) || request.resource.data.publishedVersion is int
      )
      && (
        !('thumbnailUrl' in request.resource.data) || request.resource.data.thumbnailUrl is string
      )
      && (
        !('collaborators' in request.resource.data) || request.resource.data.collaborators is list
      )
      && resource.data.createdBy == request.resource.data.createdBy
      && resource.data.createdAt == request.resource.data.createdAt;
  }

  match /databases/{database}/documents {

    // MODULES
    match /modules/{moduleId} {
      allow read: if (resource.data.isPublic != null && resource.data.isPublic == true) || isOwner() || isCollaborator();
      allow create: if isSignedIn() && validateModule() && request.resource.data.createdBy == request.auth.uid;
      allow update: if (isOwner() || isCollaborator()) && validateModuleUpdate();
      allow delete: if isOwner() || isCollaborator();

      // STEPS
      match /steps/{stepId} {
        allow read: if parent().data.isPublic == true || isOwner() || isCollaborator();
        allow create: if (isOwner() || isCollaborator()) && validateStep();
        allow update: if (isOwner() || isCollaborator()) && validateStepUpdate();
        allow delete: if isOwner() || isCollaborator();
      }
    }

    // USERS
    match /users/{userId} {
      allow read: if isSignedIn();
      allow create: if isSignedIn() && request.auth.uid == userId;
      allow update, delete: if request.auth.uid == userId;

      // PROGRESS
      match /progress/{moduleId} {
        allow write: if isSignedIn() && request.auth.uid == userId && validateProgress();
        allow read: if isSignedIn() && request.auth.uid == userId;
      }
    }
  }
}